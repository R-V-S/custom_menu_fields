<?php
/**
 * @file custom_menu_fields.module
 *
 * Provides an interface for creating help tags that are embedded directly into 
 * forms and are attached to specific fields.
 *
 */

/**
 * Implements hook_permission().
 * 
 * Define two separate permissions, one for viewing help tags, and another for
 * modifying them. 
 *
 * Also define permissions for individual menu fields based on the 'permissioned' menu field value.
 */
function custom_menu_fields_permission() {
  $custom_menu_fields_permissions = array(
    'administer menu fields' => array(
      'title' => t('Administer menu fields'), 
      'description' => t('Allow users to create/modify menu field settings'),
    ),
    'include in user role select box' => array(
      'title' => t('Include in User Role select box'), 
      'description' => t('For menu fields where "Role" is the selected option, include these roles in the select list.'),
    )
  );

  $custom_menu_fields = custom_menu_fields_get_fields();
  foreach ($custom_menu_fields as $menu_field) {
    if ($menu_field['permissioned']) {
      $permission_id = 'edit menu field id ' . $menu_field['id'];
      $permission_title = 'Edit ' . $menu_field['name'] . ' Menu Field';
      $custom_menu_fields_permissions[$permission_id] = array('title' => $permission_title);
    }
  }

  return $custom_menu_fields_permissions;
}

/**
 * Implements hook_menu().
 */
function custom_menu_fields_menu() {
  $items = array();
  $items['admin/structure/menu-fields'] = array(
    'title' => 'Menu Fields',
    'description' => 'Manage custom menu fields.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_menu_fields_admin_page'),
    'access arguments' => array('administer menu fields'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/structure/menu-fields/list'] = array(
    'title' => 'List Fields',
    'description' => 'List custom menu fields.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_menu_fields_admin_page'),
    'access arguments' => array('administer menu fields'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/menu-fields/add'] = array(
    'title' => 'Add Field',
    'description' => 'Create a custom menu field.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_menu_fields_admin_page'),
    'access arguments' => array('administer menu fields'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/structure/menu-fields/edit'] = array(
    'title' => 'Edit Field',
    'description' => 'Edit a custom menu field.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('custom_menu_fields_admin_page'),
    'access arguments' => array('administer menu fields'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function custom_menu_fields_admin_page($form, &$form_state) {
  $custom_menu_fields = custom_menu_fields_get_fields();


  $vocab_options = array('none');
  $vocabularies = taxonomy_get_vocabularies();
  foreach($vocabularies as $vocabulary){
    $vocab_options[$vocabulary->vid] = $vocabulary->name;
  }

  if ( arg(4) && (arg(3) === 'delete') ) {
    if ( isset($form_state['input']['confirm']) ) {
      $menu_field = $custom_menu_fields[ arg(4) ];
      if ( isset($menu_field['id']) ) {
        $deletion = custom_menu_fields_delete('custom_menu_fields', $menu_field['id'] );
      }
      if ($deletion) {
        drupal_set_message('Menu field deleted.', 'status', false);
        unset($custom_menu_fields[ arg(4) ]);
      }
    } else {
      return confirm_form($form,
        'Are you sure you want to delete this field?',
        'admin/structure/menu-fields',
        null,
        'Delete',
        'Cancel');
    }
  }

  if ( arg(4) && (arg(3) === 'edit') ) {
    $name = arg(4);
    $values = array(
      'name' => $name,
      'description' => $custom_menu_fields[$name]['description'],
      'field_type' => $custom_menu_fields[$name]['field_type'],
      'menu_type' => $custom_menu_fields[$name]['menu_type'],
      'weight' => $custom_menu_fields[$name]['weight'],
      'vocabulary_id' => $custom_menu_fields[$name]['vocabulary_id'],
      'permissioned' => $custom_menu_fields[$name]['permissioned']
      );
    $name_disabled = true;
  } else {
    $values = array(
      'name' => '',
      'description' => '',
      'menu_type' => 'menuitem',
      'field_type' => 'textfield',
      'vocabulary_id' => '',
      'permissioned' => false,
      'weight' => 100,
    );
    $name_disabled = false;
  }
  
  if ( arg(3) == 'add' || arg(3) === 'edit') {
    $form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Field name'),
      '#size' => 60,
      '#maxlength' => 128,
      //'#description' => t('Select the form to modify'),
      '#required' => TRUE,
      '#default_value' => $values['name'],
      '#disabled' => $name_disabled
    );

    $form['description'] = array(
      '#type' => 'textarea',
      '#title' => t('Field description'),
      //'#description' => t('Select the field to modify'),
      '#required' => FALSE,
      '#default_value' => $values['description'],
    ); 
    $form['menu_type'] = array(
      '#type' => 'select',
      '#title' => t('Menu type'),
      '#options' => array(
        'menuitem' => t('Menu item'),
        'menu' => t('Menu')
      ),
      '#default_value' => $values['menu_type'],
      '#description' => t('Defines whether this field belongs to a menu item 
                          (default) or a menu')
    );
    $form['field_type'] = array(
      '#type' => 'select',
      '#title' => t('Field type'),
      '#options' => array(
        'textfield'     => t('Text field'),
        'textarea'      => t('Text area'),
        'checkbox'      => t('Checkbox'),
        'menulist'      => t('Menu reference'),
        'menulinklist'  => t('Menu item reference'),
        'taxonomyterm'  => t('Taxonomy term reference'),
        'userrole'      => t('User Role'),
      ),
      '#default_value' => $values['field_type'],
    );
    $form['vocabulary_id'] = array(
      '#type' => 'select',
      '#title' => t('Vocabulary'),
      '#options' => $vocab_options,
      '#default_value' => $values['vocabulary_id'],
    );
    $form['permissioned'] = array(
      '#type' => 'checkbox',
      '#title' => t('Control the ability to edit this field via a permission'),
      '#default_value' => $values['permissioned'],
    );
    $form['weight'] = array(
      '#type' => 'textfield',
      '#title' => t('Weight'),
      '#description' => t('Must be a number. Default menu fields 
          get values starting with 5 and incrementally increasing by 10 (e.g. 5, 15, 25, etc.).'),
      '#size' => 4,
      '#default_value' => 100,
      '#required' => FALSE,
      '#default_value' => $values['weight'],
    );
    $form['submit'] = array(
      '#type' => 'submit', 
      '#value' => t('Submit'),
      '#submit' => array('custom_menu_fields_admin_page_submit'),
    );
    $form['cancel'] = array(
      '#markup' => l(t('Cancel'), 'admin/structure/menu-fields'),
    );

    return $form;
  } else {
    $header = array(
      'name' => 'Name', 
      'description' => 'Description', 
      'menu_type' => 'Menu type',
      'field_type' => 'Field type',
      'weight' => 'Weight',
      'vocabulary_id' => 'Vocabulary ID',
      'permissioned' => 'Permissioned',
      'edit' => 'Edit',
      'delete' => 'Delete',
    );
    $rows = array();
    
    
    foreach ($custom_menu_fields as $menu_field) {
      $rows[$menu_field['name']] = array(
        'name' => $menu_field['name'],
        'description' => $menu_field['description'],
        'menu_type' => $menu_field['menu_type'],
        'field_type' => $menu_field['field_type'],
        'weight' => $menu_field['weight'],
        'vocabulary_id' => ($menu_field['vocabulary_id'] ? $menu_field['vocabulary_id'] : '-'),
        'permissioned' => ($menu_field['permissioned'] ? 'yes' : 'no'),
        'edit'  => l('Edit',"admin/structure/menu-fields/edit/{$menu_field['name']}"),
        'delete' => l('Delete',"admin/structure/menu-fields/delete/{$menu_field['name']}"),
      );
    }
    $table = theme('table', array(
      'header' => $header,
      'rows' => $rows,
      'attributes' => array('class' => array('mytable'))
    ));
    if (count($custom_menu_fields) == 0) {
      $add_link = l(t('Create one now.'), 'admin/structure/menu-fields/add');
      $table .= "No menu fields created yet. {$add_link}";
    }
    $form['current_fields'] = array(
      '#type' => 'markup',
      '#markup' => $table,
    );
    

    return $form;
  }
}

function custom_menu_fields_admin_page_submit($form, &$form_state){
  custom_menu_fields_create_field( $form_state['values'] );

  global $base_url;
  drupal_goto( $base_url . base_path() . 'admin/structure/menu-fields', array('query' => array() ) );
}

function custom_menu_fields_create_field($item) {
  $query = db_merge('custom_menu_fields')
    ->key(array(
      'name' => $item['name'],
    ))
    ->fields(array(
      'description' => $item['description'],
      'menu_type' => $item['menu_type'],
      'field_type' => $item['field_type'],
      'weight' => intval($item['weight']),
      'vocabulary_id' => intval($item['vocabulary_id']),
      'permissioned' => intval($item['permissioned']),
    ))
    ->execute();
  $message = 'Menu field created/updated.';
  if ($query != FALSE) {
    drupal_set_message($message);
  }
}

/**
 * Implements hook_menu_link_insert().
 */
function custom_menu_fields_menu_link_insert($link){
  cache_clear_all('filtered_node_form_menu_options', 'cache_menu');
}

/**
 * Implements hook_menu_link_delete().
 */
function custom_menu_fields_menu_link_delete($link){
  cache_clear_all('filtered_node_form_menu_options', 'cache_menu');
  // Note: the following assumes that if item_id is an integer, it must be a mlid.
  db_delete('custom_menu_fields_data')->condition('item_id', $link['mlid'])->execute();
}

/**
 * Implements hook_menu_link_update().
 */
function custom_menu_fields_menu_link_update($link){
  cache_clear_all('filtered_node_form_menu_options', 'cache_menu');
}

/**
 * Implements hook_menu_delete().
 */
function custom_menu_fields_menu_delete($menu){
  $or_statement = db_or()->condition('item_id', $menu['menu_name'])->condition('value', $menu['menu_name']);
  db_delete('custom_menu_fields_data')->condition($or_statement)->execute();
}


/**
 * Implements hook_form_alter().
 */
function custom_menu_fields_form_alter(&$form, &$form_state, $form_id){
  if ($form_id === 'page_node_form'){
    if(isset($form['menu']['link']['parent']['#options'])){
      $options =& $form['menu']['link']['parent']['#options'];
      $filtered_options = $options;
      // ACTION: Mark items that point to the homepage of the site as containers:
      $filter_options = FALSE; // CURRENTLY DISABLED
      if($filter_options){
        if (!$filtered_options = cache_get('filtered_node_form_menu_options', 'cache_menu')) {
          foreach($options as $value=>&$title){
            $exploded_value = explode(':',$value);
            $menu_name = $exploded_value[0];
            $menu_link = menu_link_load($exploded_value[1]);
            if($menu_link){
              if($menu_link['href'] === '<front>'){
                $title .= ' (container)';
              }
            }
            $filtered_options[$value] = $title;
          }
          cache_set('filtered_node_form_menu_options', $filtered_options, 'cache_menu', CACHE_TEMPORARY);
        } else {
          $filtered_options = $filtered_options->data;
        }
        $options = $filtered_options;
      }
    } // END: if(isset($form['menu']['link']['parent']['#options']))
  } // END: if ($form_id === 'page_node_form')
  
  
  if ( $form_id === 'menu_edit_item' || ($form_id === 'menu_edit_menu' && isset($form['menu_name']) ) ) {
    // ACTION: Set weights for default fields:
    $form['link_path']['#weight']   = 5;
    $form['description']['#weight'] = 15;
    $form['enabled']['#weight']     = 25;
    $form['expanded']['#weight']    = 35;
    $form['parent']['#weight']      = 45;
    $form['weight']['#weight']      = 55;

    // ACTION: Get custom fields:
    $custom_menu_fields = custom_menu_fields_get_fields();
    
    // ACTION: Insert fields into form:
    foreach($custom_menu_fields as $menu_field){
      $attributes = array('class' => array('custom_menu_fields') );
      $field_type = $menu_field['field_type'];
      if ($form_id === 'menu_edit_item' && $menu_field['menu_type'] !== 'menuitem'){
        continue;
      } 
      elseif ($form_id === 'menu_edit_menu' && $menu_field['menu_type'] !== 'menu'){
        continue;
      }
      if ($form_id === 'menu_edit_item'){
        if ( is_array($form['mlid']) && isset($form['mlid']['#value']) ) {
          $form_mlid = $form['mlid']['#value'];  
        } else {
          $form_mlid = $form['mlid'];
        }
      } else {
        $form_mlid = $form['menu_name']['#default_value'];
      }
      $is_permissioned = $menu_field['permissioned'];
      if ($is_permissioned) {
        $is_hidden = !user_access('edit menu field id ' . $menu_field['id']);  
      } else {
        $is_hidden = false;
      }
      
      $default_value = custom_menu_fields_get_value($form_mlid, $menu_field['id']);
      $type = $field_type; // NOTE: This is the type for Drupal's form. Defined separately because it may be redefined later
      $options = array();
      $select_box_field_types = array('menulist', 'menulinklist', 'taxonomyterm', 'userrole');
      if ( in_array($field_type, $select_box_field_types) ){
        $type = 'select';
      }
      if ($is_hidden) {
        $type = 'hidden';
        if ( is_array($default_value) ) {
          $default_value = htmlentities( serialize($default_value) );
          $attributes['serialized'] = true;
        }
      }
      $form['menu-fields-'.$menu_field['id']] = array(
        '#title' => t($menu_field['name']),
        '#type' => $type,
        '#default_value' => $default_value,
        '#attributes' => $attributes,
        '#description' => t($menu_field['description']),
        '#required' => FALSE,
        '#weight' => $menu_field['weight'],
      );
      // Hidden fields require a value to be defined, or else it will fail validation:
      if ($is_hidden) {
        $form['menu-fields-'.$menu_field['id']]['#value'] = $default_value;
      }
      if ( ($field_type === 'menulist') || ($field_type ==='menulinklist') ) {
        $form['menu-fields-'.$menu_field['id']]['#options'] = array('' => 'None');
        $form['menu-fields-'.$menu_field['id']]['#options'] += menu_get_menus(TRUE);
      }
      if ($field_type === 'menulinklist'){
        // ACTION: Build complete list of menu links (to appease Drupal form validation...)
        $options = array('' => 'None');
        $all_menus = menu_load_all();
        foreach($all_menus as $menu){
          $links = menu_load_links($menu['menu_name']);
          foreach($links as $link){
            $options[ $link['mlid'] ] = $link['link_title'];
          }
        }
        if ( isset($form['menu_name']) ) {
          $default_value = custom_menu_fields_get_value($form['menu_name']['#default_value'].'-menulink', $menu_field['id']);
        } else {
          $default_value = '';
        }
        $form['menu-fields-'.$menu_field['id'].'-linklist'] = array(
          '#title' => t($menu_field['name']) . ' Link',
          '#type' => 'select',
          '#default_value' => $default_value,
          '#description' => t($menu_field['description']),
          '#required' => FALSE,
          '#weight' => intval($menu_field['weight'])+1,
          '#prefix' => '<div id="menu-fields-'.$menu_field['id'].'-linklist-wrapper">',
          '#suffix' => '</div>',
          '#options' => $options,
        );
        $form['menu-fields-'.$menu_field['id']]['#ajax'] = array(
          'callback' => 'custom_menu_fields_form_alter_ajax',
          'wrapper' => 'menu-fields-'.$menu_field['id'].'-linklist-wrapper',
        );
        $form['menu-fields-'.$menu_field['id']]['#attributes']['menulist-id'] = 'menu-fields-'.$menu_field['id'].'-linklist';
      } // END: if ($field_type === 'menulinklist')
      if ($field_type === 'taxonomyterm') {
        $vocabulary_id = $menu_field['vocabulary_id'];
        $terms = taxonomy_get_tree($vocabulary_id);
        $term_options = array(''=>'none');
        foreach($terms as $term){
          $dashes = 0;
          $term_title = '';
          while($dashes < $term->depth){
            $term_title .= '-';
            $dashes++;
          }
          $term_title .= $term->name;
          $term_options[$term->tid] = $term_title;
        }
        if (!$is_hidden) {
          $form['menu-fields-'.$menu_field['id']]['#options'] = $term_options;
        }
      }
      if ($field_type === 'userrole') {
        $user_roles = array('0' => 'All Users', '2' => 'All Internal/Authenticated Users') + user_roles(FALSE, 'include in user role select box');
        if (count($user_roles) > 1) {
          $user_roles[1] = 'Anonymous';
          $form['menu-fields-'.$menu_field['id']]['#multiple'] = TRUE;
          $form['menu-fields-'.$menu_field['id']]['#options'] = $user_roles;
          $form['menu-fields-'.$menu_field['id']]['#default_value'] = $default_value;
        } else {
          $form['menu-fields-'.$menu_field['id']]['#type'] = 'markup';
          $form['menu-fields-'.$menu_field['id']]['#markup'] = 
              t('<strong>'.$menu_field['name'].'</strong>: No user roles have been assigned yet');
        }
        
      }
    }
    $form['#submit'][] = 'custom_menu_fields_form_alter_submit';
  }
  
  return $form;
}

/**
 * Implements hook_form_alter_ajax().
 */
function custom_menu_fields_form_alter_ajax(&$form, &$form_state){
  $trigger = $form_state['triggering_element'];
  $menu_name = $trigger['#value'];
  $form_id = $form['#form_id'];
  $menulist_id = $trigger['#attributes']['menulist-id'];
  $menulist = $form[$menulist_id];
  $links = menu_load_links($menu_name);
  $options = array();
  foreach($links as $link){
    $link_path = $link['link_path'];
    $mlid = $link['mlid'];
    if(!preg_match('/http|<front>|calendar/', $link_path)) {
      $options[ $mlid ] = $link['link_title'];
      
    }
  }
  if($options[0]){
    $menulist['#value'] = $options[0];
  }
  $menulist['#options'] = $options;
  
  return $menulist;
}

/**
 * Returns an array of all menu fields.
 */
function custom_menu_fields_get_fields($force_refresh = false){
  static $static_custom_menu_fields = array();
  if ( count($static_custom_menu_fields) == 0 || $force_refresh) {
    $results = db_select('custom_menu_fields', 'mf')
        ->fields('mf')
        ->execute();
    while ($record = $results->fetchAssoc()) {
      $static_custom_menu_fields[$record['name']] = $record;
    }
  }
  return $static_custom_menu_fields;
}

/**
 * Returns id of menu field, given its name.
 */
function custom_menu_fields_get_mfid($name) {
  $custom_menu_fields = custom_menu_fields_get_fields();
  return isset($custom_menu_fields[$name]['id']) ? $custom_menu_fields[$name]['id'] : FALSE;
}

/**
 * Returns the value of a given menu (or menu item) field. 
 * 
 * @param $item_id 
 *   The menu or menu item ID.
 * 
 * @param $identifier
 *   Either the name of the field or the ID of the field. Using the ID yields 
 *   better performance. The ID is displayed at admin/tructure/custom_menu_fields
 * 
 * @return
 *   A string containing the appropriate value, or FALSE if no value is set.
 */
function custom_menu_fields_get_value($item_id, $identifier) {
  static $static_values = array();

  // The identifier can be either a string or an mfid. Convert to mfid if
  // it's a string:
  if (!is_numeric($identifier)) {
    $mfid = custom_menu_fields_get_mfid($identifier);
  } else {
    $mfid = $identifier;
  }

  if (is_array($item_id)) {
    if ( isset($item_id['#value']) ) {
      $item_id = $item_id['#value'];
    } else {
      error_log('Menu Fields module: custom_menu_fields_get_value function received an invalid array as $item_id', 0);
      return;
    }
  }

  // Use the static var if it has anything
  if (count($static_values) == 0) {
    // Set a common key to use, we're getting all values, so no need to differentiate
    $cache_key = _custom_menu_fields_cache_key();
    // Get cached data
    $cached_data = cache_get($cache_key);
    // Check if we actually got anything
    if(!empty($cached_data)) {
      $static_values = $cached_data->data;
    } else {
      $results = db_select('custom_menu_fields_data', 'mfd')
            ->fields('mfd')
            ->execute();
      while ($record = $results->fetchAssoc()) {
        if ( isset($record['value']) ) {
          $this_item_id = $record['item_id'];
          $this_mfid = $record['mfid'];
          if (@unserialize($record['value']) !== FALSE || $record['value'] === 'b:0;') {
            $static_values[$this_mfid][$this_item_id] = unserialize( $record['value'] );  
          } else {
            $static_values[$this_mfid][$this_item_id] = $record['value'];
          }
        } 
      }
      // Set the cache for 24 hours (60*60*24 = 86400)
      cache_set($cache_key,$static_values,'cache',time()+86400);
    }
  }

  $menu_data = isset($static_values[$mfid][$item_id]) ? $static_values[$mfid][$item_id] : FALSE;

  return $menu_data;
}

function _custom_menu_fields_cache_key() {
  return 'custom_menu_fields_values';
}

function custom_menu_fields_set_value($item_id, $mfid, $value, $override_previous_call = false) {
  // Remember values that have been set in this code run, and only override them if
  // explicitly requested.
  static $set_values = array();

  $key = $item_id . '--' . $mfid;

  if ( isset( $set_values[$key] ) && !$override_previous_call) {
    return false;
  }

  if ( is_array($value) ) {
    $value = serialize($value);
  }

  $query = db_merge('custom_menu_fields_data')
    ->key(array(
      'item_id' => $item_id,
      'mfid'    => $mfid
      ))
    ->fields(array(
      'value' => $value,
      ))
    ->execute();

  $set_values[$key] = true;
  // Clear the cached menu fields structure
  cache_clear_all(_custom_menu_fields_cache_key(),'cache');

  return $query;
}

function custom_menu_fields_delete($table, $id) {
  if ($table === 'custom_menu_fields') {
    $id_field = 'id';
  } elseif ($table === 'custom_menu_fields_data') {
    $id_field = 'item_id';
  }

  try {
    db_delete($table)->condition('id', $id)->execute();

    return true;
  } catch(Exception $e) {
    error_log('Menu Fields module: custom_menu_fields_delete function failed to execute', 0);
  }

  return false;
}


function custom_menu_fields_form_alter_submit($form, &$form_state){
  $item = &$form_state['values'];
  if( isset($item['mlid']) ) {
    $item_id = $item['mlid'];
  } else {
    $item_id = $item['menu_name'];
  }
  if (isset($item['old_name']) && $item['old_name'] == '') {
    $item_id = 'menu-' . $item_id;
  } 
  
  // ACTION: Get custom menu fields (not the data, just the fields themselves)
  $custom_menu_fields = custom_menu_fields_get_fields();
  
  // ACTION: Get field values from the form
  foreach ($custom_menu_fields as $menu_field) {
    $mfid = $menu_field['id'];
    $field_name = 'menu-fields-' . $mfid; 
    if ( isset( $item[$field_name] ) )  {
      $value = $item[$field_name];
      if ( (isset($form[$field_name]['#attributes']['serialized']) ) && ($form[$field_name]['#attributes']['serialized'] == true) ) {
        $value = unserialize(html_entity_decode($value));
      }
      custom_menu_fields_set_value($item_id, $mfid, $value);
    }
    $menulink_field_name = 'menu-fields-' . $mfid . '-linklist'; 
    if ( isset( $item[$menulink_field_name] ) ) {
      $value = $item[$menulink_field_name];
      custom_menu_fields_set_value($item_id . '-menulink', $mfid, $value);
    }
  }
}